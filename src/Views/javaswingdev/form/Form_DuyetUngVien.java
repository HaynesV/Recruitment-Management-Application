package Views.javaswingdev.form;

import Controller.JobPostActivityController;
import Model.JobPostActivity;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.types.ObjectId;

/**
 *
 * @author USER
 */
public class Form_DuyetUngVien extends javax.swing.JPanel {

    private JobPostActivityController jobPostActivityController;
    private DefaultTableModel tableModel;

    public Form_DuyetUngVien() {
        initComponents();
        jobPostActivityController = new JobPostActivityController();
        initTable();
        loadData();
    }

    private void initTable() {
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new String[]{"Tên Người Dùng", "Mô Tả Công Việc", "Ngày Ứng Tuyển", "Trạng Thái"});
        table1.setModel(tableModel);
    }

    private void loadData() {
        tableModel.setRowCount(0);
        List<JobPostActivity> activities = jobPostActivityController.getAllActivities();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

        for (JobPostActivity activity : activities) {
            String userName = jobPostActivityController.getUserNameById(new ObjectId(activity.getUserAccountId().toHexString()));
            String jobDescription = jobPostActivityController.getJobDescriptionById(new ObjectId(activity.getJobPostId().toHexString()));
            String applyDate = dateFormat.format(activity.getApplyDate());
            String status = activity.isAccepted() ? "Đã duyệt" : "Chưa duyệt";

            tableModel.addRow(new Object[]{userName, jobDescription, applyDate, status});
        }
        int totalAcceptedApplicants = jobPostActivityController.countAcceptedApplicants();

        // Hiển thị tổng số lượng ứng viên đã được duyệt vào txt_tongungvien
        txt_tongungvien.setText(String.valueOf(totalAcceptedApplicants));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        roundPanel1 = new Views.javaswingdev.swing.RoundPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new Views.javaswingdev.swing.table.Table();
        jButton1 = new javax.swing.JButton();
        btn_Duyet = new javax.swing.JButton();
        btn_Huy = new javax.swing.JButton();
        btn_TuChoi1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_tongungvien = new Views.javaswingdev.login.swing.TextField();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DUYỆT ỨNG VIÊN");

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table1);

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                .addGap(0, 33, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("XEM CHI TIẾT");

        btn_Duyet.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_Duyet.setText("DUYỆT");
        btn_Duyet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DuyetActionPerformed(evt);
            }
        });

        btn_Huy.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_Huy.setText("HỦY YÊU CẦU");
        btn_Huy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_HuyActionPerformed(evt);
            }
        });

        btn_TuChoi1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_TuChoi1.setText("TỪ CHỐI");
        btn_TuChoi1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TuChoi1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Số lượng ứng viên đã được duyệt:");

        txt_tongungvien.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_Duyet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_tongungvien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(btn_TuChoi1)
                .addGap(77, 77, 77)
                .addComponent(btn_Huy)
                .addGap(178, 178, 178))
            .addComponent(roundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btn_Duyet)
                    .addComponent(btn_TuChoi1)
                    .addComponent(btn_Huy))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_tongungvien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_DuyetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DuyetActionPerformed
        // Get the selected row index
        int selectedRow = table1.getSelectedRow();

        if (selectedRow != -1) {
            // Retrieve the user name and job description from the selected row in the table
            String userName = (String) tableModel.getValueAt(selectedRow, 0);
            String jobDescription = (String) tableModel.getValueAt(selectedRow, 1);

            // Find the corresponding JobPostActivity based on user name and job description
            List<JobPostActivity> activities = jobPostActivityController.getAllActivities();
            JobPostActivity selectedActivity = activities.stream()
                    .filter(activity -> jobPostActivityController.getUserNameById(activity.getUserAccountId()).equals(userName)
                    && jobPostActivityController.getJobDescriptionById(activity.getJobPostId()).equals(jobDescription))
                    .findFirst()
                    .orElse(null);

            if (selectedActivity != null) {
                // Set the selected activity as accepted (is_accepted = true)
                selectedActivity.setAccepted(true);

                // Update the JobPostActivity in the database
                jobPostActivityController.updateJobPostActivity(selectedActivity.getId(), selectedActivity);

                // Reload the table data to reflect the updated status
                loadData();

                // Show success message using JOptionPane
                JOptionPane.showMessageDialog(this, "Ứng viên đã được duyệt thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Show error message if activity is not found
                JOptionPane.showMessageDialog(this, "Không tìm thấy hoạt động ứng tuyển.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Show error message if no row is selected
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng trong bảng để duyệt.", "Lỗi", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_DuyetActionPerformed

    private void btn_TuChoi1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TuChoi1ActionPerformed
        // Get the selected row index
        int selectedRow = table1.getSelectedRow();

        if (selectedRow != -1) {
            // Retrieve the user name and job description from the selected row in the table
            String userName = (String) tableModel.getValueAt(selectedRow, 0);
            String jobDescription = (String) tableModel.getValueAt(selectedRow, 1);

            // Find the corresponding JobPostActivity based on user name and job description
            List<JobPostActivity> activities = jobPostActivityController.getAllActivities();
            JobPostActivity selectedActivity = activities.stream()
                    .filter(activity -> jobPostActivityController.getUserNameById(activity.getUserAccountId()).equals(userName)
                    && jobPostActivityController.getJobDescriptionById(activity.getJobPostId()).equals(jobDescription))
                    .findFirst()
                    .orElse(null);

            if (selectedActivity != null) {
                // Set the selected activity's isAccepted field to null
                selectedActivity.setAccepted(false);

                // Update the JobPostActivity in the database
                jobPostActivityController.updateJobPostActivity(selectedActivity.getId(), selectedActivity);

                // Reload the table data to reflect the updated status
                loadData();

                // Show success message using JOptionPane
                JOptionPane.showMessageDialog(this, "Ứng viên đã bị từ chối!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Show error message if activity is not found
                JOptionPane.showMessageDialog(this, "Không tìm thấy hoạt động ứng tuyển.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Show error message if no row is selected
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng trong bảng để từ chối.", "Lỗi", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_TuChoi1ActionPerformed

    private void btn_HuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_HuyActionPerformed
        // Get the selected row index
        int selectedRow = table1.getSelectedRow();

        if (selectedRow != -1) {
            // Retrieve the user name and job description from the selected row in the table
            String userName = (String) tableModel.getValueAt(selectedRow, 0);
            String jobDescription = (String) tableModel.getValueAt(selectedRow, 1);

            // Find the corresponding JobPostActivity based on user name and job description
            List<JobPostActivity> activities = jobPostActivityController.getAllActivities();
            JobPostActivity selectedActivity = activities.stream()
                    .filter(activity -> jobPostActivityController.getUserNameById(activity.getUserAccountId()).equals(userName)
                    && jobPostActivityController.getJobDescriptionById(activity.getJobPostId()).equals(jobDescription))
                    .findFirst()
                    .orElse(null);

            if (selectedActivity != null) {
                // Confirm with the user before deleting
                int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa yêu cầu duyệt này?", "Xác nhận", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    // Delete the selected activity from the database
                    jobPostActivityController.deleteJobPostActivity(selectedActivity.getId());

                    // Reload the table data to reflect the deletion
                    loadData();

                    // Show success message using JOptionPane
                    JOptionPane.showMessageDialog(this, "Yêu cầu duyệt đã bị xóa thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                // Show error message if activity is not found
                JOptionPane.showMessageDialog(this, "Không tìm thấy hoạt động ứng tuyển.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Show error message if no row is selected
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng trong bảng để xóa.", "Lỗi", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_HuyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Duyet;
    private javax.swing.JButton btn_Huy;
    private javax.swing.JButton btn_TuChoi1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private Views.javaswingdev.swing.RoundPanel roundPanel1;
    private Views.javaswingdev.swing.table.Table table1;
    private Views.javaswingdev.login.swing.TextField txt_tongungvien;
    // End of variables declaration//GEN-END:variables
}
